<html><head><title>Аллокация локальных переменных в стеке</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="description" content='Процедуры для выделения и освобождения памяти для локальных переменных в стеке. Работают быстрее, чем GetMem и FreeMem'>
<meta name="keywords" content="pascal, sources, source code, locvar, memory, Управление Памятью ">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../sources.css"></head><BODY><center>

<!--#include virtual="/t_hmenu.htm"-->


<div align='left'>&nbsp;&nbsp;&nbsp;<a class='title' href="index.htm">Управление Памятью</a>&nbsp&nbsp;&nbsp;&nbsp;<small>&gt;&gt;</small>&nbsp;&nbsp;&nbsp;&nbsp;locvar
<br>&nbsp;&nbsp;&nbsp;<img border=0 height=4 width=50% align='top' src="../img/b.gif" alt="">
<br>&nbsp;
</div>


<TABLE cellSpacing=0 cellpadding=0 width=97% border=0>

<TR class=subheader><TD colSpan=3><IMG height=2 src="../img/1x1.gif" width=1></td></tr>
<TR><TD class=subheader width=70% nowrap>&nbsp;Аллокация локальных переменных в стеке</TD>
<TD nowrap class=black>&nbsp;Олег Харин</TD>
<TD class=black align='right'>15.09.1995</TD></TR>
<TR vALign=top><TD class=black>&#10;<p style="margin-left:20px">Процедуры для выделения и освобождения памяти
для локальных переменных в стеке.
Работают быстрее, чем GetMem и FreeMem</TD><TD class=black colspan=2 align='right'><br><A HREF="locvar.zip"><img border=0 align=middle src="../img/dsk.gif"></A><br>1k&nbsp;</TD></TR><TR><TD>&nbsp;</TD></TR>

<TR class=subheader><TD colSpan=3><IMG height=2 src="../img/1x1.gif" width=1></td></tr>
<TR><TD colspan=3><PRE><p style="margin-left:50px">From : Oleg Kharin &lt;ok@ulk.udm.ru&gt;
Date: 15 Sep 1994 08:02:26 +0500
Organization: JSV Uvinsky lesokombinat

Эти процедуры позволяют аллоцировать и освобождать память для локальных
переменных в стеке. Преимущества перед GetMem:

1. Работает быстрее.
2. Позволяет не дробить память, если далее вызывается GetMem, а аллоцированная
   в стеке память освобождается.


function GetStackMem(Size:word):pointer;
 inline($58/            { pop ax}
        $40/            { inc ax }      { Для выравнивания на слово }
        $25/$FE/$FF/    { and ax,$FFFE}
        $2B/$E0/        { sub sp,ax}
        $8B/$C4/        { mov ax,sp}
        $8C/$D2         { mov dx,ss});
procedure FreeStackMem(Size:word);
 inline($58/            { pop ax}
        $40/            { inc ax }      { Для выравнивания на слово }
        $25/$FE/$FF/    { and ax,$FFFE}
        $03/$E0         { add sp,ax }
        );



Пример:
procedure Test(Size:word);
 var
  p     : pointer;
 begin
  p := GetStackMem(Size);

  {Здесь можно использовать p^}

  FreeStackMem(Size);
 end;

Если в программе есть локальные переменные, то в ее конце можно
FreeStackMem не вызывать (т.к. SP получает в первоначальное значение из BP).

                                                        Олег.</PRE>

<!--#include virtual="/t_footer.htm"-->

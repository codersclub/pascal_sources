<html><head><title>Smart Expression Compiler</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="description" content='Компилятор выражений. Генерирует ассемблерный код и выполняет его. Smart Expression Compiler for Turbo/Borland Pascal 7.0'>
<meta name="keywords" content="pascal, sources, source code, bpc-sec, parsing, Разбор и Анализ Строк ">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../sources.css"></head><BODY><center>

<!--#include virtual="/t_hmenu.htm"-->


<div align='left'>&nbsp;&nbsp;&nbsp;<a class='title' href="index.htm">Разбор и Анализ Строк</a>&nbsp&nbsp;&nbsp;&nbsp;<small>&gt;&gt;</small>&nbsp;&nbsp;&nbsp;&nbsp;bpc-sec
<br>&nbsp;&nbsp;&nbsp;<img border=0 height=4 width=50% align='top' src="../img/b.gif" alt="">
<br>&nbsp;
</div>


<TABLE cellSpacing=0 cellpadding=0 width=97% border=0>

<TR class=subheader><TD colSpan=3><IMG height=2 src="../img/1x1.gif" width=1></td></tr>
<TR><TD class=subheader width=70% nowrap>&nbsp;Smart Expression Compiler</TD>
<TD nowrap class=black>&nbsp;<img border=0 align=bottom src="../img/mail.gif">&nbsp;<a href="mailto:solar at openwall.com">Solar Designer</a></TD>
<TD class=black align='right'>16.07.1996</TD></TR>
<TR vALign=top><TD class=black>&#10;<p style="margin-left:20px">Компилятор выражений. Генерирует ассемблерный код и выполняет его.
Smart Expression Compiler for Turbo/Borland Pascal 7.0</TD><TD class=black colspan=2 align='right'><br><A HREF="bpc-sec.zip"><img border=0 align=middle src="../img/dsk.gif"></A><br>12k&nbsp;</TD></TR><TR><TD>&nbsp;</TD></TR>

<TR class=subheader><TD colSpan=3><IMG height=2 src="../img/1x1.gif" width=1></td></tr>
<TR><TD colspan=3><PRE><p style="margin-left:50px">       Smart Expression Compiler for Turbo/Borland Pascal 7.0

Note: this expression compiler is known to be buggy, its optimizer will
sometimes incorrectly swap operands.  The code got too complex, so I've
given up on it back in 1994 (didn't have a real need for it anymore as
well).  Except for this little detail &lt;g&gt;, you might find it to be a good
example of hacks specific to Borland Pascal for generating x86 assembly
code for an expression at runtime, with only a 25% performance penalty
compared to code generated by BP itself (not that it's any good).  This
can also serve as an example of how complex things tend to need re-coding
to make their code readable once again after some design decisions have
changed.  In this case, that decision was to add the ability to detect
and calculate constant subexpressions at compile time.

                                                       Solar Designer</PRE>

<!--#include virtual="/t_footer.htm"-->

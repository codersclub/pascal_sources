<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Атрибуты окна - Программирование X Window средствами Free Pascal - Исходники.Ру</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="description" content='Курс лекций по программированию на FPC в X Window на платформе Unix. Атрибуты окна.'>
<meta name="keywords" content="pascal, sources, source code, graph, kde, unix, window, графика ">
<LINK REL=STYLESHEET TYPE="text/css" HREF="/sources.css"></head><BODY><center>

<!--#include virtual="/t_hmenu.htm"-->


<div align='left'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class='blueb' href="/graph/index.htm">Графика</a>&nbsp&nbsp;&nbsp;&nbsp;<small>&gt;&gt;</small>
<br>&nbsp;&nbsp;&nbsp;<img border=0 height=4 width=50% align='top' src="/img/b.gif" alt="">
<br>&nbsp;
</div>


<TABLE cellSpacing=0 cellpadding=0 width=97% border=0>
<TR><TD colspan=3><p style="margin-left:50px">

<CENTER>
<H1>Программирование в X-Window
<br>средствами Free Pascal</H1>
Авторы: А.П. Полищук, С.А. Семериков
<BR>
[Оформление в HTML: <a class=blue href="mailto:rswag@sources.ru">Valery Votintsev</a>]
</CENTER>

<br>
<A class=blue HREF="../xwinfpc.htm">Содержание</a>

<br>
1. <A class=blue HREF="xbasics.htm">Основы программирования в системе X Window</A>
<BR>
1.1. <A class=blue HREF="basics.htm">Основные понятия</A>
<BR>
<hr>
<!-- begin CONTENT -->
<h2>1.1.8. Атрибуты окна</h2>

<dir>

Многие атрибуты окна задаются при его создании с помощью
процедуры <code>XCreateWindow()</code> или
<code>XCreateSimpleWindow()</code>.
Впоследствии параметры можно изменить, обратившись к процедуре
<code>XChangeWindowAttributes()</code>.

<br>
<br>

Характеристики окна описываются структурами типа
<code>TXSetWindowAttributes</code> и
<code>TXWindowAttributes</code>. Получить их
можно с помощью процедуры
<code>XGetWindowAttributes()</code>.

<br>
<br>

Все они делятся на две группы. В первую входят параметры,
доступные "на чтение" и "на запись". Вторая группа представляет собой
внутренние данные. Программа может прочитать их, но не может менять.

<br>
<br>

Сначала перечислим поля этих структур, которые относятся к
"изменяемым" параметрам.

<br>
<br>

<I>Фон окна</I> определяется атрибутами
<code>background_pixmap</code> и
<code>background_pixel</code>. Первый из них задает
картинку (карту пикселей), которая используется для заливки фона окна. При
необходимости картина повторяется слева направо и сверху вниз. Если параметр
<code>background_pixmap</code> равен
<code>None</code> (задается по умолчанию),
то он игнорируется. Если же при этом поле
<code>background_pixel</code> не задано (установлено по умолчанию), то окно
считается "прозрачным", в противном случае его фон заливается цветом
<code>background_pixel</code>. Атрибуты
<code>background_pixmap</code> и
<code>background_pixel</code> могут также
принимать значение
<code>ParentRelative</code>. В этом случае характеристики фона заимствуются
у родительского окна.

<br>
<br>

<I>Вид края окна</I> определяется полями
<code>border_pixmap</code> и
<code>border_pixel</code>. Первый атрибут определяет карту пикселей,
используемую для заполнения края. Если он равен
<code>None</code>, то край заполняется цветом
<code>border_pixel</code>. Если же и поле
<code>border_pixel</code> не задано, то для изображения
края используются соответствующие характеристики родителя. То же самое
происходит, если параметр
<code>border_pixmap</code> равен
<code>CopyFromParent</code> (взять у родителя). Последнее значение есть
значение по умолчанию.

<br>
<br>

На <I>перерисовку</I> окна после изменения его размеров
влияют атрибуты <code>bit_gravity</code> и
<code>win_gravity</code>. Когда окно меняет
размер, например, увеличивается или уменьшается, то, в принципе, нет
необходимости перерисовывать все его содержимое. Часть окна остается
неизменной. Правда, эта часть может поменять свое положение: переместиться
вправо, влево, вверх или вниз.

<br>
<br>

Поле
<code>bit_gravity</code> говорит серверу, что делать с оставшейся частью
изображения. Возможные значения параметра следующие:

<UL type=square>
<li><code>ForgetGravity</code> - содержимое окна перерисовывается
(считается значением по умолчанию);</li>

<li><code>StaticGravity</code> - остающаяся часть не должна менять положение
по отношению к главному (корневому (root)) окну сервера;</li>

<li><code>NorthWestGravity</code> - остающаяся часть смещается к левому
верхнему углу;</li>

<li><code>NorthGravity</code> - остающаяся часть смещается к верху окна;</li>

<li><code>NorthEastGravity</code> - остающаяся часть смещается к правому
верхнему углу;</li>

<li><code>WestGravity</code> - остающаяся часть смещается к левому краю окна;</li>

<li><code>CenterGravity</code> - остающаяся часть смещается к центру окна;</li>

<li><code>EastGravity</code> - остающаяся часть смещается к правому краю окна;</li>

<li><code>SouthWestGravity</code> - остающаяся часть смещается к левому нижнему
углу;</li>

<li><code>SouthGravity</code> - остающаяся часть смещается к нижнему краю окна;</li>

<li><code>SouthEastGravity</code> - остающаяся часть смещается к правому
нижнему углу.</li>

</ul>
<br>

Параметр <code>win_gravity</code> говорит о том, что делать с
<I>подокнами</I> окна
после изменения размеров последнего. Возможные значения параметра следующие
(при перечислении используются следующие обозначения:

<dir>

<code>H</code> - изменение размеров окна по горизонтали,
<br>
<code>V</code> - изменение размеров по
вертикали,
<br>
<code>(H, V)</code> - смещение подокна на
<code>H</code> пикселей по горизонтали и на
<code>V</code> пикселей по вертикали):
</dir>

<UL type=square>

<li><code>UnmapGravity</code> - подокна удаляются с экрана; окну посылается
событие <code>UnmapNotify</code>, в ответ на которое оно может переместить
свои подокна и показать их с помощью процедуры
<code>XMapSubWindow()</code>;</li>

<li><code>StaticGravity</code> - подокна остаются на месте по отношению
к главному (корневому) окну сервера;</li>

<li><code>NorthWestGravity</code> - устанавливается по умолчанию;
соответствует смещению <code>(0,&nbsp;0)</code>;</li>

<li><code>NorthGravity</code> - смещение <code>(H/2, 0)</code>;</li>

<li><code>NorthEastGravity</code> - смещение <code>(H, 0)</code>;</li>

<li><code>WestGravity</code> - смещение <code>(0, V/2)</code>;</li>

<li><code>CenterGravity</code> - смещение <code>(H/2, V/2)</code>;</li>

<li><code>EastGravity</code> - смещение <code>(H, V/2)</code>;</li>

<li><code>SouthWestGravity</code> - смещение <code>(0, V)</code>;</li>

<li><code>SouthGravity</code> - смещение <code>(H/2, V)</code>;</li>

<li><code>SouthEastGravity</code> - смещение <code>(H, V)</code>;</li>

</ul>
<br>

<I>Автоматическое сохранение содержимого окна</I>, когда
его часть перекрывается другими окнами, или, когда окно удаляется с экрана,
определяется параметрами
<code>backing_store</code>,
<code>backing_planes</code> и
<code>backing_pixel</code>. Сохраненные данные могут использоваться для
восстановления окна, что значительно быстрее, чем его перерисовка программой
в ответ на событие <code>Expose</code>.
Параметр <code>backing_store</code> имеет
следующие возможные значения:

<UL type=square>

<li><code>NotUseful</code> (устанавливается по умолчанию) - серверу не
рекомендуется сохранять содержимое окна;</li>

<li><code>WhenMapped</code> - серверу рекомендуется спасти содержимое
невидимых частей окна, когда окно показывается на экране;</li>

<li><code>Always</code> - серверу рекомендуется сохранить содержимое окна даже,
если оно не показано на экране.</li>

</ul>
<br>

Сохранение изображений требует, как правило, довольно
большого расхода памяти. Атрибуты
<code>backing_planes</code> и
<code>backing_pixel</code> призваны <I>уменьшить этот расход</I>. Первый из
указанных параметров говорит серверу, какие плоскости изображения надо
сохранять; <code>backing_pixel</code>
означает, какой цвет использовать при восстановлении изображения в тех
плоскостях, которые не сохранялись. По умолчанию
<code>backing_planes</code> - маска, состоящая из единиц, а
<code>backing_pixel</code> равно 0.

<br>
<br>

Иногда при показе окна полезно <I>сохранить содержимое
экрана под окном</I>. Если окно невелико, и показывается не на долго, то это
позволяет экономить время, которое надо будет затратить на перерисовку экрана
после того, как окно будет закрыто. Если атрибут
<code>save_under</code> равен
<code>True</code>, то сервер будет пытаться сохранить изображение под окном.
Если же он равен <code>False</code> (по умолчанию),
то сервер ничего не предпринимает.

<br>
<br>

Когда обрабатывает (или не обрабатывает) событие,
последнее может быть <I>передано его родительскому окну</I>. Атрибут
<code>do_not_propagate_mask</code> (по
умолчанию 0) говорит и о том, какие события не должны доходить до
родителей.

<br>
<br>

<I>Изменение размеров окна и его положения</I> на экране
контролируется атрибутом
<code>override_redirect</code>. Если он равен
<code>False</code>, то размер окна и его положение меняются с помощью
менеджера окон. Если же он равен
<code>True</code>, то окно само решает, где ему быть, и какую ширину и
высоту иметь.

<br>
<br>

<I>Цветовую гамму окна</I> задает параметр
<code>colormap</code>. Значение по умолчанию -
<code>CopyFromPatent</code>, которое
говорит, что окно использует палитру своего непосредственного родителя.

<br>
<br>

Теперь рассмотрим "неизменяемые" параметры окна. Строго
говоря, атрибуты, о которых пойдет речь, нельзя назвать неизменяемыми.
Некоторые из них могут меняться сервером или менеджером окон. Но для обычных
программ-клиентов они действительно являются таковыми.

<br>
<br>

<I>Положение окна и его размеры</I> сообщают поля
<code>x</code>,
<code>y</code>, <code>width</code> и
<code>height</code>. Они дают координаты левого верхнего
угла, ширину и высоту окна соответственно. Координаты измеряются в пикселях
по отношению к родительскому окну.

<br>
<br>

<I>Ширина края окна</I> определяется параметром
<code>border_width</code>.

<br>
<br>

Маска, говорящая о том, <I>какие события выбраны для
передачи окну</I> породившим его клиентом, содержится в поле флагов
<code>your_event_mask</code>. Значение
параметра образуется комбинацией флагов, идентифицирующих события.

<br>
<br>

<I>Информация о дисплее</I>, на котором показано окно,
содержится в структуре <code>Visual</code>,
на которую показывает поле
<code>visual</code>. Эти данные, как правило, не обрабатываются обычными
программами-клиентами (заметим, что для получения информации о дисплее, в
системе предусмотрена процедура
<code>XGetVisualInfo()</code>).

<br>
<br>

<I>Класс окна</I> сообщает поле
<code>class</code>. Возможные значения:
<code>InputOutput</code> и
<code>InputOnly</code>.

<br>
<br>

<I>Число цветовых плоскостей дисплея</I> (число
бит-на-пиксел) помещается в поле
<code>depth</code>.

<br>
<br>

На <I>информацию об экране</I>, на котором помещается
окно, указывает поле <code>screen</code>.
Она, как правило, не используется обычными программами.

<br>
<br>

<I>Идентификатор главного (корневого) окна экрана</I>, на
котором помещается окно, находится в поле
<code>root</code>.

<br>
<br>

<I>Если окно имеет палитру</I>, и она в настоящее время
активна, то поле <code>map_installed</code>
равно <code>True</code>, в противном случае
- <code>False</code>.

<br>
<br>

<I>Видно в настоящее время окно на экране</I> или нет,
сообщает атрибут <code>map_state</code>.

<br>
<br>

<I>Маска всех событий, выбранных всеми программами для
данного окна</I>, содержится в атрибуте
<code>all_event_mask</code>. Дело в том, что окно обрабатывается не только
порождающим его клиентом, но, возможно, и другими приложениями, например,
менеджером окон.

<br>
<br>

Мы рассказали о том, как получить атрибуты окна, и что они
означают. Теперь рассмотрим, как их изменить. Для этого можно использовать
несколько процедур X Window, основной из которых является
<code>XChangeWindowAttributes()</code>, имеющая
следующий прототип:

<pre>
Function XChangeWindowAttributes(prDisplay : PDisplay;
         nWnd : TWindow; nValueMask : cardinal;
         prWinAttr : PXSetWindowAttributes) : longint; cdecl;external;
</pre>

Требуемые установки атрибутов передаются через аргумент
<code>prWinAttr</code>. Он указывает на
переменную типа
<code>TXSetWindowAttributes</code>. Ее поля те же, что и соответствующие
поля <code>TXWindowAttributes</code>.
Разница заключается лишь в разных именах некоторых из них. Так, поле
<code>your_event_mask</code> в
<code>TXWindowAttributes</code> соответствует полю
<code>event_mask</code> в
<code>TXSetWindowAttributes</code>.

<br>
<br>

Структура
<code>TXSetWindowAttributes</code> содержит дополнительное поле
<code>cursor</code>. Оно определяет <I>вид курсора
мыши</I>, когда последний находится в окне. Если поле равно
<code>None</code> (значение по умолчанию), то
используется курсор родительского окна, в противном случае значением
параметра должен быть идентификатор того или иного курсора.

<br>
<br>

Параметр
<code>nValueMask</code> при вызове указанной процедуры представляет
комбинацию флагов, говорящих о том, какие из полей переменной
<code>prWinAttr</code> принимать во внимание.

<br>
<br>

В следующем примере приведен фрагмент кода, в котором
изменяются параметры
<code>border_pixmap</code> и
<code>win_gravity</code> некоторого окна:

<pre>.......
var
   prDisplay : PDisplay;
   prWnd     : TWindow;
   rWndAttr  : TXSetWindowAttributes;
   nValMask  : cardinal;
const
   nPixmap   : TPixmap =0;
.......
nValMask := CWBorderPixmap or CWWinGravity;
rWndAttr.border_pixmap := nPixmap;
rWndAttr.win_gravity := StaticGravity;
.......
XChangeWindowAttributes (prDisplay, prWnd, nValMask, @rWndAttr);
.......
</pre>

Отдельные атрибуты окна можно изменить более просто с
помощью специальных процедур. Так функция
<code>XSetWindowBackground()</code> меняет фон окна,
<code>XSetWindowBorder()</code> - его край.

</dir>
<br>


<!-- end of CONTENT -->
<!--#include virtual="/t_footer.htm"-->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Использование цвета - Программирование X Window средствами Free Pascal - Исходники.Ру</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="description" content='Курс лекций по программированию на FPC в X Window на платформе Unix. Использование цвета.'>
<meta name="keywords" content="pascal, sources, source code, graph, kde, unix, window, графика ">
<LINK REL=STYLESHEET TYPE="text/css" HREF="/sources.css"></head><BODY><center>

<!--#include virtual="/t_hmenu.htm"-->


<div align='left'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a class='blueb' href="/graph/index.htm">Графика</a>&nbsp&nbsp;&nbsp;&nbsp;<small>&gt;&gt;</small>
<br>&nbsp;&nbsp;&nbsp;<img border=0 height=4 width=50% align='top' src="/img/b.gif" alt="">
<br>&nbsp;
</div>


<TABLE cellSpacing=0 cellpadding=0 width=97% border=0>
<TR><TD colspan=3><p style="margin-left:50px">


<CENTER>
<H1>Программирование в X-Window
<br>средствами Free Pascal</H1>
Авторы: А.П. Полищук, С.А. Семериков
<BR>
[Оформление в HTML: <a class=blue href="mailto:rswag@sources.ru">Valery Votintsev</a>]
</CENTER>

<br>
<A class=blue HREF="../xwinfpc.htm">Содержание</a>

<br>
1. <A class=blue HREF="xbasics.htm">Основы программирования в системе X Window</A>
<BR>
1.2. <A class=blue HREF="gr_text.htm">Текст и графика</A>
<BR>
<hr>
<!-- begin CONTENT -->
<h2>1.2.4. Использование цвета</h2>

<dir>

Во времена не столь отдаленные экранные контроллеры
могли поддерживать одновременно ограниченное количество цветов (вначале 16,
позже 256). В связи с этим приложение не могло просто запросить рисование
ярко-красным цветом, и ожидать, что этот цвет будет доступным. Каждое
приложение распределяло цвета, которые ему были нужны, и когда все 16 или
256 цветовых элементов использовались, следующее распределение цвета
заканчивалось неудачей.

<br>
<br>

В связи с этим появилось понятие "цветовой карты" -
<I>палитры</I>. Палитра является таблицей того же размера, что и количество
одновременно отображаемых данным экранным контроллером цветов. Каждый элемент
палитры содержит RGB (Красные, Зеленые и Синие) величины различных цветов
(все цвета могут быть нарисованы, используя некоторую комбинацию красного,
зеленого и синего).

<br>
<br>

Для того, чтобы сделать использование цветов близким к
тому, которое предполагал программист, были введены функции выделения
палитры. Вы можете попросить, выделить вас элемент палитры для цвета,
заданного набором RGB-значений. Если он уже существовал, вы получите индекс в
таблице. Если цвет не существовал, и таблица не заполнена, должна быть
выделена новая ячейка палитры, содержащая данные значения RGB, и возвращен ее
индекс. Если таблица была заполнена, процедура должна была закончиться
неудачей. Вы могли затем запросить получение элемента палитры с цветом,
ближайшим к требуемому. Это означает, что фактически рисование на экране
будет произведено с использованием цвета, близкого к желаемому, но не того же
самого.

<br>
<br>

На сегодняшних современных экранах, где работают сервера X
с поддержкой миллионов цветов, эти ограничения кажутся устаревшими, но
помните, что есть и старые компьютеры со старыми графическими картами внутри,
равно как и 256-цветные Х-терминалы. С использованием палитры, поддержка этих
экранов становится прозрачной. На дисплее, поддерживающем миллионы цветов,
любой запрос распределения цветового элемента будет удовлетворен. На дисплее,
поддерживающем ограниченное количество цветов, некоторые цветовые запросы
распределения должно возвращать подобные цвета. Они не выглядит столь хорошо,
как требуемые, но ваше приложение все еще будет работать.

<br>
<br>

При рисовании с использованием Xlib можно выбрать
стандартную палитру экрана, на котором отображается ваше окно, или создать
новую палитру и применить ее для окна. В последнем случае, всякий раз, когда
мышь "наезжает" на ваше окно, экранная палитра заменится палитрой вашего
окна, и вы увидите, что все другие окна на экране изменят свои цвета на нечто
весьма экзотическое.

<br>
<br>

Для доступа к стандартной экранной палитре, определена
функция <code>XDefaultColormap</code>,
возвращающая дескриптор палитры, используемой по умолчанию на первом экране
(напоминаем, что сервер X может поддерживать несколько различных экранов,
каждый из которых может иметь свои собственные ресурсы).

<pre>
var
  screen_colormap : TColormap;
  screen_colormap := XDefaultColormap(display, XDefaultScreen(display));
</pre>

Другой макрос, связанный с распределением новой
палитры, работает так:

<pre>
var
  default_visual : PVisual;
  my_colormap : TColormap;

  default_visual := XDefaultVisual(display, XDefaultScreen(display));
  (* Создаем новую палитру, количество цветов в которой       *)
  (* определяется количеством цветов, поддерживаемых данным экраном. *)
  my_colormap := XCreateColormap(display,
                    win,
                    default_visual,
                    AllocNone);
</pre>

Имейте в виду, что дескриптор окна используется только для того,
чтобы позволить серверу X создать палитру для данного экрана.
Мы можем затем использовать эту палитру для любого окна,
нарисованного на том же экране.

<br>
<br>

Как только мы получили доступ к некоторой палитре, мы можем начать
распределять цвета. Это делается с помощью функций
<code>XAllocNamedColor()</code> и
<code>XAllocColor()</code>. Первая из них -
<code>XAllocNamedColor()</code> - принимает имя цвета (например,
"<code>red</code>", "<code>blue</code>",
"<code>brown</code>" и т.д.) и распределяет ближайший цвет,
который может в действительности рисоваться на экране.
<code>XAllocColor()</code> принимает цвет RGB, и распределяет
ближайший цвет, который может отображаться на экране.
Обе функции используют структуру
<code>TXColor</code>, содержащую следующие поля:

<pre>
 pixel : cardinal - индекс палитры, используемый для рисования данным цветом.
 red   : word - красная составляющая RGB-значения цвета.
 green : word - зеленая составляющая RGB-значения цвета.
 blue  : word - синяя составляющая RGB-значения цвета.
</pre>

Пример использования этих функций:

<pre>
var
  (* Эта структура будет содержать выделенные цветовые данные *)
  system_color_1, system_color_2 : TXColor;
  (* Эта структура будет содержать точные RGB-значения именованных *)
  (* цветов, которые могут отличаться от выделенных        *)
  exact_color : TXColor;
  rc : TStatus;

  (* Выделяем "красный" элемент палитры *)
  rc := XAllocNamedColor(display,
               screen_colormap,
               'red',
               @system_color_1,
               @exact_color);
  (* проверяем успешность выделения *)
  if (rc = 0) then begin
    writeln('XAllocNamedColor - выделить "красный" цвет не удалось.');
  end
  else begin
    writeln('Элемент палитры "красный" выделен как (',
            system_color_1.red, ', ', system_color_1.green, ', ',
            system_color_1.blue, ') в RGB-значениях.');
  end;

  (* выделяем цвет со значениями (30000, 10000, 0) в RGB. *)
  system_color_2.red := 30000;
  system_color_2.green := 10000;
  system_color_2.blue := 0;
  rc := XAllocColor(display,
            screen_colormap,
            @system_color_2);
  (* проверяем успешность выделения *)
  if (rc = 0) then begin
     writeln('XAllocColor - цвет (30000,10000,0) выделить не удалось.');
  end
  else begin
    (* что-то делаем с выделенным цветом... *)
  .
  .
  end;
</pre>

После того, как мы распределили желаемые цвета, мы можем
использовать их, рисуя текст или графику. Для этого нам нужно установить эти
цвета как передний план и цвет фона для некоторого GC (графического
контекста), и затем используйте этот GC для рисования. Это делается с помощью
функций <code>XSetForeground()</code> и
<code>XSetBackground()</code>:

<pre>
XSetForeground(display, my_gc, screen_color_1.pixel);
XSetForeground(display, my_gc, screen_color_2.pixel);
</pre>

Само же рисование осуществляется с помощью тех же функций,
что и ранее. Для использования нескольких цветов, можно сделать одно из двух:
мы можем либо изменить передний план и/или цвет фона GC перед любой функцией
рисования, либо использовать несколько различных GC. Решение, какой из
способов лучше, принимать вам: распределение многих GC будет использовать
больше ресурсов X сервера, но где-то это приведет к более компактному коду, и
может быть легче, чем замена цветов рисования.

</dir>
<br>


<!-- end of CONTENT -->
<!--#include virtual="/t_footer.htm"-->

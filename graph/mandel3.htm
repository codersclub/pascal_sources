<html><head><title>Mandlebrot Set Fractal Curves</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="description" content="Программа для генерации множества Мандельброта с EGA разрешением. Используется драйвер EGAVGA.BGI.<br><font color=#666666> This program generates the Mandlebrot set fractal curves. It is taken from Roger T. Stevens book: FRACTAL Programming in Turbo Pascal. The program is coded to be displayed on an EGA monitor at 640 x 200 resolution.</font>">
<meta name="keywords" content="pascal, sources, source code, mandel3, graph, Графика ">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../sources.css"></head><BODY><center>
<!--#include virtual="/t_hmenu.htm"-->
<div align='left'>&nbsp;&nbsp;&nbsp;<a class='title' href="index.htm">Графика</a>&nbsp&nbsp;&nbsp;&nbsp;<small>&gt;&gt;</small>&nbsp;&nbsp;&nbsp;&nbsp;mandel3
<br>&nbsp;&nbsp;&nbsp;<img border=0 height=4 width=50% align='top' src="../img/b.gif" alt="">
<br>&nbsp;
</div>

<TABLE cellSpacing=0 cellpadding=0 width=97% border=0>

<TR class=subheader><TD colSpan=3><IMG height=2 src="../img/1x1.gif" width=1></td></tr>
<TR><TD class=subheader width=70% nowrap>&nbsp;Mandlebrot Set Fractal Curves</TD>
<TD nowrap class=black>&nbsp;Unknown</TD>
<TD class=black align='right'>21.09.92</TD></TR>
<TR vALign=top><TD class=black><br>
<img border=0 align=left width=60 height=40 vspace=4 hspace=8 alt="" src="mandel3.gif"><p style="margin-left:20px">Программа для генерации множества Мандельброта с EGA
разрешением. Используется драйвер EGAVGA.BGI.<br><font color=#666666>
This program generates the Mandlebrot set fractal curves.
It is taken from Roger T. Stevens book: FRACTAL Programming
in Turbo Pascal. The program is coded to be displayed on an
EGA monitor at 640 x 200 resolution.</font></TD><TD class=black colspan=2 align='right'><br><A HREF="mandel3.zip"><img border=0 align=middle src="../img/dsk.gif"></A><br>9k&nbsp;</TD></TR><TR><TD>&nbsp;</TD></TR>

<TR class=subheader><TD colSpan=3><IMG height=2 src="../img/1x1.gif" width=1></td></tr>
<TR><TD colspan=3><PRE><p style="margin-left:50px">&nbsp;
                <img border=0 width=320 height=200 src="mandel31.gif" alt="">

program mandel;

{ This program generates the Mandlebrot set fractal curves.
  It is taken from Roger T. Stevens book: FRACTAL Programming
  in Turbo Pascal.
  This is the best book to buy if you are interested in or
  studying fractal curves and chaos.

  The below program is coded to be displayed on an EGA monitor at
  640 x 200 resolution.  Simple modifications can be made to
  display the set on a higher resolution.  Using anything below an
  EGA display will NOT produce the spectacular effects as do the
  EGA and higher modes.

  EGADrive is a unit I wrote to link in the EGAVGA.BGI screen
  routines at compile time.  Notice how you don't need to specify
  the BGI path in the call to InitGraph.

  To make the program run faster on slower machines,
  but sacrificing detail, change the max_iterations constant to
  something lower.  Therefore, the lesser the iterations,
  the less detailed the curves, and vice versa.
}

uses CRT, Graph;

const
     maxcol = 640;
     maxrow = 200;
     max_colors = 16;
     max_iterations = 512;
     max_size = 4;

var
   Q    :   array[0..349] of real;
   XMax,YMax,XMin,YMin : real;
   P,deltaP,deltaQ,X,Y,Xsquare,Ysquare : real;
   i,color,row,col,GraphDriver,GraphMode : integer;
   ch : char;

begin
     XMax := 1.2;
     XMin := -2.0;
     YMax := 1.2;
     YMin :=-1.2;
     GraphDriver := EGA;
     GraphMode := EGALo;
     InitGraph(GraphDriver,GraphMode,'');
     deltaP := (XMax - XMin)/(maxcol);
     deltaQ := (YMax - Ymin)/(maxrow);
     Q[0] := YMax;
     for row := 1 to maxrow do
         Q[row] := Q[row-1] - deltaQ;
     P := XMin;
     for col := 0 to maxcol do
     begin
          if Keypressed then
             exit;
          for row := 0 to maxrow do
          begin
               X := 0.0;
               Y := 0.0;
               Xsquare := 0.0;
               Ysquare := 0.0;
               color := 1;
               repeat               { this is the "meat" }
                     Xsquare := X*X;
                     Ysquare := Y*Y;
                     Y := 2*X*Y + Q[row];
                     X := Xsquare - Ysquare + P;
                     inc(color);
               until (color&gt;=max_iterations) OR
                     (Xsquare + Ysquare &gt;= max_size);
               PutPixel(col,row,(color MOD max_colors));
          end;
          P := P + deltaP;
     end;
     ch := ReadKey;
end.</PRE>

<!--#include virtual="/t_footer.htm"-->
